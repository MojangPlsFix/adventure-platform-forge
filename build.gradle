buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.65', changing: true
        classpath 'org.spongepowered:mixingradle:0.7+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version "7.1.2"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'


version = '0.1.0'
group = 'net.kyori.adventure.platform.forge'
archivesBaseName = 'adventure-platform-forge'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: 'official', version: '1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
/*
    runs {
        client {
            workingDirectory project.file('run_client')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'adventure_platform_forge'

            mods {
                adventure_platform_forge {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run_server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'adventure_platform_forge'

            mods {
                adventure_platform_forge {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run_gametest')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'adventure_platform_forge'

            mods {
                adventure_platform_forge {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run_data')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                adventure_platform_forge {
                    source sourceSets.main
                }
            }
        }
    }
*/
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        name = "sonatype-oss-snapshots"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.0'

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    shade "net.kyori:adventure-api:4.12.0"
    shade "net.kyori:adventure-key:4.12.0"

    shade "net.kyori:adventure-platform-api:4.1.2"

    shade "net.kyori:adventure-text-minimessage:4.12.0"
    shade "net.kyori:adventure-text-serializer-plain:4.12.0"
    shade "net.kyori:adventure-text-serializer-gson:4.12.0"

    shade "net.kyori:examination-api:1.3.0"
    shade "net.kyori:examination-string:1.3.0"

    shade "org.jetbrains:annotations:23.1.0"
}

mixin {
    add sourceSets.main, 'mixins.adventure_platform_forge.refmap.json'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}

shadowJar {
    mergeServiceFiles()
    classifier=""
    configurations = [project.configurations.shade]
    //relocate 'net.kyori.adventure', '${project.group}.shadow.adventure'
    relocate 'org.jetbrains', '${project.group}.shadow.org.jetbrains'


    exclude 'module-info.class'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/proguard/**'
    exclude 'org/slf4j/**'
}

tasks.shadowJar.dependsOn('reobfJar')

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.outputs.files.singleFile
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "adventure-platform-forge",
                "Specification-Vendor"    : "KyoriPowered",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "MyFTB",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'mixins.adventure_platform_forge.json'
        ])
    }
}

jar.finalizedBy('reobfJar')
